{"version":3,"sources":["../src/types.js"],"names":["evaluateValueType","candidate","fallback","scalar","console","warn","charge","value","base","defaultValue","charged","baseIsRequired","isRequired","undefined","properties","memo","property","get","log","Object","defineProperties","createType","propType","type","getOwnPropertyNames","forEach","defineProperty","any","array","bool","element","func","number","object","shape","string","symbol","Symbol"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAAiC;AACzD,MAAIA,WAAW,KAAX,IAAoB,QAAOF,SAAP,yCAAOA,SAAP,eAA4BC,QAA5B,yCAA4BA,QAA5B,EAAxB,EAA8D;AAC5DE,YAAQC,IAAR,CACE,kCADF,SAESH,QAFT,yCAESA,QAFT,GAEmB,aAFnB,SAEyCD,SAFzC,yCAEyCA,SAFzC,GAGE,MAHF,EAGUA,SAHV,EAGqB,gBAHrB,EAIE,oCAJF;;AAOA,WAAOC,QAAP;AACD;;AAED,SAAOD,SAAP;AACD,CAbD;;AAeA,IAAMK,SAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,IAAR,EAAcC,YAAd,EAA+B;AAC5C,MAAMC,UAAU,oBAAO,EAAP,EAAWF,IAAX,EAAiB;AAC/BG,oBAAgB,KADe;AAE/BC,gBAAYC;AAFmB,GAAjB,CAAhB;AAIA,MAAMC,aAAa,oBAAOJ,OAAP,EAAgB,UAACK,IAAD,EAAOR,KAAP,EAAcS,QAAd,EAA2B;AAC5D,QAAIA,aAAa,OAAjB,EAA0B,OAAOD,IAAP;;AAE1B,WAAO,oBAAO,EAAP,EAAWA,IAAX,sBACJC,QADI,EACO,EAAEC,KAAK;AAAA,eAAMV,KAAN;AAAA,OAAP,EADP,EAAP;AAGD,GANkB,EAMhB,EANgB,CAAnB;;AAQAH,UAAQc,GAAR,CAAYJ,UAAZ;AACA,SAAOK,OAAOC,gBAAP,CAAwB;AAC7Bb,WAAOP,kBAAkBO,KAAlB,EAAyBE,YAAzB,EAAuCD,KAAKL,MAA5C;AADsB,GAAxB,EAEJW,UAFI,CAAP;AAGD,CAjBD;;AAmBA,IAAMO,aAAa,SAAbA,UAAa,CAAClB,MAAD,EAASM,YAAT,EAA0B;AAC3C,MAAMa,WAAW,oBAAUnB,MAAV,CAAjB;AACA,MAAMK,OAAOF,OAAOG,YAAP,EAAqB,EAAEN,cAAF,EAAUmB,kBAAV,EAArB,EAA2Cb,YAA3C,CAAb;AACA,MAAMc,OAAO,SAAPA,IAAO,CAAChB,KAAD;AAAA,WAAWD,OAAOC,KAAP,EAAcC,IAAd,EAAoBC,YAApB,CAAX;AAAA,GAAb;;AAEAU,SAAOK,mBAAP,CAA2BhB,IAA3B,EAAiCiB,OAAjC,CAAyC,UAACT,QAAD,EAAc;AACrD,QAAIA,aAAa,OAAjB,EAA0B;AACxBG,aAAOO,cAAP,CAAsBH,IAAtB,EAA4BP,QAA5B,EAAsC;AACpCC,aAAK;AAAA,iBAAMT,KAAKQ,QAAL,CAAN;AAAA;AAD+B,OAAtC;AAGD,KAJD,MAIO;AACLO,WAAKP,QAAL,IAAiBR,KAAKQ,QAAL,CAAjB;AACD;AACF,GARD;;AAUA,SAAOO,IAAP;AACD,CAhBD;;AAkBO,IAAMI,oBAAMN,WAAW,KAAX,EAAkB,IAAlB,CAAZ;AACA,IAAMO,wBAAQP,WAAW,OAAX,EAAoB,EAApB,CAAd;AACA,IAAMQ,sBAAOR,WAAW,MAAX,EAAmB,IAAnB,CAAb;AACA,IAAMS,4BAAUT,WAAW,SAAX,eAAhB;AACA,IAAMU,sBAAOV,WAAW,MAAX,eAAb;AACA,IAAMW,0BAASX,WAAW,QAAX,EAAqB,CAArB,CAAf;AACA,IAAMY,0BAASZ,WAAW,QAAX,EAAqB,EAArB,CAAf;AACA,IAAMa,wBAAQb,WAAW,OAAX,EAAoB,EAApB,CAAd;AACA,IAAMc,0BAASd,WAAW,QAAX,EAAqB,EAArB,CAAf;AACA,IAAMe,0BAASf,WAAW,QAAX,EAAqBgB,OAAO,EAAP,CAArB,CAAf","file":"types.js","sourcesContent":["import { assign, reduce, noop } from 'lodash'\nimport PropTypes from 'prop-types'\n\nconst evaluateValueType = (candidate, fallback, scalar) => {\n  if (scalar !== 'any' && typeof candidate !== typeof fallback) {\n    console.warn(\n      'Evalute Schemative type expected',\n      typeof fallback, 'but receive', typeof candidate,\n      'when', candidate, 'value was set.',\n      'Default value is returned instead.'\n    )\n\n    return fallback\n  }\n\n  return candidate\n}\n\nconst charge = (value, base, defaultValue) => {\n  const charged = assign({}, base, {\n    baseIsRequired: false,\n    isRequired: undefined\n  })\n  const properties = reduce(charged, (memo, value, property) => {\n    if (property === 'value') return memo\n\n    return assign({}, memo, {\n      [property]: { get: () => value }\n    })\n  }, {})\n\n  console.log(properties)\n  return Object.defineProperties({\n    value: evaluateValueType(value, defaultValue, base.scalar)\n  }, properties)\n}\n\nconst createType = (scalar, defaultValue) => {\n  const propType = PropTypes[scalar]\n  const base = charge(defaultValue, { scalar, propType }, defaultValue)\n  const type = (value) => charge(value, base, defaultValue)\n\n  Object.getOwnPropertyNames(base).forEach((property) => {\n    if (property !== 'value') {\n      Object.defineProperty(type, property, {\n        get: () => base[property]\n      })\n    } else {\n      type[property] = base[property]\n    }\n  })\n\n  return type\n}\n\nexport const any = createType('any', true)\nexport const array = createType('array', [])\nexport const bool = createType('bool', true)\nexport const element = createType('element', noop)\nexport const func = createType('func', noop)\nexport const number = createType('number', 0)\nexport const object = createType('object', {})\nexport const shape = createType('shape', {})\nexport const string = createType('string', '')\nexport const symbol = createType('symbol', Symbol(''))\n"]}