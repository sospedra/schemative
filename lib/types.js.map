{"version":3,"sources":["../src/types.js"],"names":["EXPOSED_PROPERTIES","evaluateValueType","candidate","fallback","scalar","console","warn","createTypeBase","base","isRequired","propType","__required__","createPrototype","value","defaultValue","createType","createProperties","prototype","memo","property","includes","properties","Type","Object","defineProperties","createTypeWithDefault","type","setPrototypeOf","any","array","bool","element","func","number","object","shape","string","symbol","Symbol"],"mappings":"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","file":"types.js","sourcesContent":["import { assign, reduce, noop } from 'lodash'\nimport PropTypes from 'prop-types'\n\nconst EXPOSED_PROPERTIES = ['value']\n\n/**\n * Trigger a warning when assigning a value which does not\n * fit with the provided scalar.\n * Return default value.\n *\n * @param  {Any} candidate\n * @param  {Any} fallback\n * @param  {String} scalar\n * @return {Any}\n */\nconst evaluateValueType = (candidate, fallback, scalar) => {\n  if (scalar !== 'any' && typeof candidate !== typeof fallback) {\n    console.warn(\n      'Evalute Schemative type expected',\n      typeof fallback, 'but receive', typeof candidate,\n      'when', candidate, 'value was set.',\n      'Default value is returned instead.'\n    )\n\n    return fallback\n  }\n\n  return candidate\n}\n\nconst createTypeBase = (base, isRequired) => {\n  const propType = PropTypes[base.scalar]\n\n  return {\n    ...base,\n    __required__: !!isRequired,\n    propType: isRequired ? propType.isRequired : propType,\n    scalar: base.scalar\n  }\n}\n\nconst createPrototype = (value, base, defaultValue) => {\n  return assign({}, base, {\n    isRequired: !base.__required__ &&\n      createType(value, createTypeBase(base, true), defaultValue)\n  })\n}\n\nconst createProperties = (prototype) => {\n  return reduce(prototype, (memo, value, property) => {\n    if (EXPOSED_PROPERTIES.includes(property)) return memo\n    return assign({}, memo, {[property]: { value }})\n  }, {})\n}\n\n/**\n * Given a value, type base and default value creates an Schemative type.\n * Create the object with the type definition.\n * Pick all the properties that goes to the prototype.\n * Add the properties to an object containing the type exposed values.\n *\n * @param  {Any} value        - Selected value\n * @param  {Object} base      - Contains basic type's data\n *   @param  {String} scalar    - Type name\n *   @param  {Func} propTypes   - React PropTypes equivalent\n * @param  {Any} defaultValue - Default type value\n * @return {Object}           - Type\n */\nconst createType = (value, base, defaultValue) => {\n  const prototype = createPrototype(value, base, defaultValue)\n  const properties = createProperties(prototype)\n  const Type = function () {}\n\n  Type.value = evaluateValueType(value, defaultValue, prototype.scalar)\n\n  return Object.defineProperties(Type, properties)\n}\n\nconst createTypeWithDefault = (scalar, defaultValue) => {\n  const base = createType(defaultValue, createTypeBase({ scalar }), defaultValue)\n  const type = function (value) { return createType(value, base, defaultValue) }\n\n  Object.setPrototypeOf(type, base)\n  type.value = base.value\n\n  return type\n}\n\nexport const any = createTypeWithDefault('any', true)\nexport const array = createTypeWithDefault('array', [])\nexport const bool = createTypeWithDefault('bool', true)\nexport const element = createTypeWithDefault('element', noop)\nexport const func = createTypeWithDefault('func', noop)\nexport const number = createTypeWithDefault('number', 0)\nexport const object = createTypeWithDefault('object', {})\nexport const shape = createTypeWithDefault('shape', {})\nexport const string = createTypeWithDefault('string', '')\nexport const symbol = createTypeWithDefault('symbol', Symbol(''))\n"]}