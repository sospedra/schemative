{"version":3,"sources":["../src/types.js"],"names":["evaluateValueType","candidate","fallback","console","warn","charge","value","base","defaultValue","charged","baseIsRequired","isRequired","undefined","propType","createType","scalar","type","Object","keys","forEach","key","any","array","bool","element","func","number","object","shape","string","symbol","Symbol"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,SAAD,EAAYC,QAAZ,EAAyB;AACjD,MAAI,QAAOD,SAAP,yCAAOA,SAAP,eAA4BC,QAA5B,yCAA4BA,QAA5B,EAAJ,EAA0C;AACxCC,YAAQC,IAAR,CACE,kCADF,SAESF,QAFT,yCAESA,QAFT,GAEmB,aAFnB,SAEyCD,SAFzC,yCAEyCA,SAFzC,GAGE,MAHF,EAGUA,SAHV,EAGqB,gBAHrB,EAIE,oCAJF;;AAOA,WAAOC,QAAP;AACD;;AAED,SAAOD,SAAP;AACD,CAbD;;AAeA,IAAMI,SAAS,SAATA,MAAS,CAACC,KAAD,EAAQC,IAAR,EAAcC,YAAd,EAA+B;AAC5C,MAAMC,UAAU,oBAAO,EAAP,EAAWF,IAAX,EAAiB;AAC/BD,WAAON,kBAAkBM,KAAlB,EAAyBE,YAAzB,CADwB;AAE/BE,oBAAgB,KAFe;AAG/BC,gBAAYC;AAHmB,GAAjB,CAAhB;;AAMA,SAAO,oBAAO,EAAP,EAAWH,OAAX,EAAoB;AACzBE,gBAAY,oBAAO,EAAP,EAAWF,OAAX,EAAoB;AAC9BC,sBAAgB,IADc;AAE9BG,gBAAUJ,QAAQI,QAAR,CAAiBF;AAFG,KAApB;AADa,GAApB,CAAP;AAMD,CAbD;;AAeA,IAAMG,aAAa,SAAbA,UAAa,CAACC,MAAD,EAASP,YAAT,EAA0B;AAC3C,MAAMK,WAAW,oBAAUE,MAAV,CAAjB;AACA,MAAMR,OAAOF,OAAOG,YAAP,EAAqB,EAAEO,cAAF,EAAUF,kBAAV,EAArB,EAA2CL,YAA3C,CAAb;AACA,MAAMQ,OAAO,SAAPA,IAAO,CAACV,KAAD;AAAA,WAAWD,OAAOC,KAAP,EAAcC,IAAd,EAAoBC,YAApB,CAAX;AAAA,GAAb;;AAEAS,SAAOC,IAAP,CAAYX,IAAZ,EAAkBY,OAAlB,CAA0B,UAACC,GAAD,EAAS;AACjCJ,SAAKI,GAAL,IAAYb,KAAKa,GAAL,CAAZ;AACD,GAFD;;AAIA,SAAOJ,IAAP;AACD,CAVD;;AAYO,IAAMK,oBAAMP,WAAW,KAAX,EAAkB,IAAlB,CAAZ;AACA,IAAMQ,wBAAQR,WAAW,OAAX,EAAoB,EAApB,CAAd;AACA,IAAMS,sBAAOT,WAAW,MAAX,EAAmB,IAAnB,CAAb;AACA,IAAMU,4BAAUV,WAAW,SAAX,eAAhB;AACA,IAAMW,sBAAOX,WAAW,MAAX,eAAb;AACA,IAAMY,0BAASZ,WAAW,QAAX,EAAqB,CAArB,CAAf;AACA,IAAMa,0BAASb,WAAW,QAAX,EAAqB,EAArB,CAAf;AACA,IAAMc,wBAAQd,WAAW,OAAX,EAAoB,EAApB,CAAd;AACA,IAAMe,0BAASf,WAAW,QAAX,EAAqB,EAArB,CAAf;AACA,IAAMgB,0BAAShB,WAAW,QAAX,EAAqBiB,OAAO,EAAP,CAArB,CAAf","file":"types.js","sourcesContent":["import { assign, noop } from 'lodash'\nimport PropTypes from 'prop-types'\n\nconst evaluateValueType = (candidate, fallback) => {\n  if (typeof candidate !== typeof fallback) {\n    console.warn(\n      'Evalute Schemative type expected',\n      typeof fallback, 'but receive', typeof candidate,\n      'when', candidate, 'value was set.',\n      'Default value is returned instead.'\n    )\n\n    return fallback\n  }\n\n  return candidate\n}\n\nconst charge = (value, base, defaultValue) => {\n  const charged = assign({}, base, {\n    value: evaluateValueType(value, defaultValue),\n    baseIsRequired: false,\n    isRequired: undefined\n  })\n\n  return assign({}, charged, {\n    isRequired: assign({}, charged, {\n      baseIsRequired: true,\n      propType: charged.propType.isRequired\n    })\n  })\n}\n\nconst createType = (scalar, defaultValue) => {\n  const propType = PropTypes[scalar]\n  const base = charge(defaultValue, { scalar, propType }, defaultValue)\n  const type = (value) => charge(value, base, defaultValue)\n\n  Object.keys(base).forEach((key) => {\n    type[key] = base[key]\n  })\n\n  return type\n}\n\nexport const any = createType('any', true)\nexport const array = createType('array', [])\nexport const bool = createType('bool', true)\nexport const element = createType('element', noop)\nexport const func = createType('func', noop)\nexport const number = createType('number', 0)\nexport const object = createType('object', {})\nexport const shape = createType('shape', {})\nexport const string = createType('string', '')\nexport const symbol = createType('symbol', Symbol(''))\n"]}