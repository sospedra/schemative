{"version":3,"sources":["../src/schemative.js"],"names":["createSchema","definition","flat","flatten","nodes","filter","node","VAL","baseIsRequired","undefined","__schemative__","PropTypes","Default","transform"],"mappings":";;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAIO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,UAAD,EAAgB;AAC1C,MAAMC,OAAO,eAAKC,OAAL,CAAaF,UAAb,CAAb;AACA,MAAMG,QAAQF,KAAKG,MAAL,CAAY,UAACC,IAAD,EAAU;AAClC,WAAOA,KAAK,eAAKC,GAAV,KAAkBD,KAAK,eAAKC,GAAV,EAAeC,cAAf,KAAkCC,SAA3D;AACD,GAFa,CAAd;;AAIA,SAAO;AACLC,oBAAgB,IADX;AAELC,eAAW,+BAAgBP,KAAhB,CAFN;AAGLQ,aAAS,8BAAeR,KAAf,CAHJ;AAILS,eAAW,+BAAgBT,KAAhB;AAJN,GAAP;AAMD,CAZM;;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"schemative.js","sourcesContent":["import tsil from 'tsil'\n\nimport createPropTypes from './createPropTypes'\nimport createDefaults from './createDefaults'\nimport createTransform from './createTransform'\n\nexport * from './types'\n\nexport const createSchema = (definition) => {\n  const flat = tsil.flatten(definition)\n  const nodes = flat.filter((node) => {\n    return node[tsil.VAL] && node[tsil.VAL].baseIsRequired !== undefined\n  })\n\n  return {\n    __schemative__: true,\n    PropTypes: createPropTypes(nodes),\n    Default: createDefaults(nodes),\n    transform: createTransform(nodes)\n  }\n}\n\n// tsil.deflatten(\n//  tsil.modify(\n//    tsil\n//      .flatten({\n//        a: s.string('e').isRequired\n//      })\n//      .filter(x => {\n//        return x[tsil.VAL] && x[tsil.VAL].baseIsRequired !== undefined\n//      }),\n//     (x) => x.value\n//    )\n//  )\n"]}