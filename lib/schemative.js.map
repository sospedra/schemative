{"version":3,"sources":["../src/schemative.js"],"names":["createType","type","def","propTypes","value","iterable","createFunctionType","values","array","stubArray","bool","stubTrue","func","noop","number","object","stubObject","string","stubString","symbol","Symbol","any","element","stubFalse","instanceOf","node","oneOf","oneOfType","arrayOf","objectOf","shape","createSchemaByObject","schema","attr","entries","reduce","memo","key","selectRecursiveStrategy","createSchemaByArray","map","nestedSchema","isArray","createPropTypes","createDefault","filterByKeys","candidate","keys","intersection","pick","transform","attributes","Object","assign","isFunction","createSchema","PropTypes","Default","bind"],"mappings":"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","file":"schemative.js","sourcesContent":["import { PropTypes } from 'react'\nimport _ from 'lodash'\n\nconst createType = (type, def) => ({\n  propTypes: PropTypes[type],\n  value: def,\n  iterable: false\n})\n\nconst createFunctionType = (type) => (values) => ({\n  propTypes: PropTypes[type],\n  value: values,\n  iterable: true\n})\n\nexport const array = createType('array', _.stubArray())\nexport const bool = createType('bool', _.stubTrue())\nexport const func = createType('func', _.noop())\nexport const number = createType('number', -1)\nexport const object = createType('object', _.stubObject())\nexport const string = createType('string', _.stubString())\nexport const symbol = createType('symbol', Symbol)\nexport const any = createType('any', _.stubTrue())\nexport const element = createType('element', _.stubFalse())\nexport const instanceOf = createType('instanceOf', _.stubFalse())\nexport const node = createType('node', _.stubFalse())\nexport const oneOf = createFunctionType('oneOf')\nexport const oneOfType = createFunctionType('oneOfType')\nexport const arrayOf = createFunctionType('arrayOf')\nexport const objectOf = createFunctionType('objectOf')\nexport const shape = createFunctionType('shape')\n\nexport const createSchemaByObject = (schema, attr) => {\n  return _.entries(schema)\n    .reduce((memo, [key, value]) => {\n      memo[key] = value.iterable\n        ? selectRecursiveStrategy(value.value, attr)\n        : value[attr]\n      return memo\n    }, {})\n}\n\nexport const createSchemaByArray = (schema, attr) => {\n  return _.map(schema, (values) => {\n    return values.iterable\n      ? selectRecursiveStrategy(values.value, attr)\n      : values[attr]\n  })\n}\n\nexport const selectRecursiveStrategy = (nestedSchema, attr) => {\n  return _.isArray(nestedSchema)\n    ? createSchemaByArray(nestedSchema, attr)\n    : createSchemaByObject(nestedSchema, attr)\n}\n\nexport const createPropTypes = (schema) => {\n  return createSchemaByObject(schema, 'propTypes')\n}\n\nexport const createDefault = (schema) => {\n  return createSchemaByObject(schema, 'value')\n}\n\nexport const filterByKeys = (schema, candidate) => {\n  const keys = _.intersection(_.keys(schema), _.keys(candidate))\n  return _.pick(candidate, keys)\n}\n\nexport const transform = (schema, candidate, attributes) => Object.assign(\n  filterByKeys(schema, candidate),\n  _.reduce(attributes, (memo, value, key) => Object.assign(\n    memo,\n    {\n      [key]: _.isFunction(value) ? value(candidate) : value\n    }\n  ), {})\n)\n\nexport const createSchema = (schema) => ({\n  PropTypes: createPropTypes(schema),\n  Default: createDefault(schema),\n  transform: transform.bind(null, schema)\n})\n"]}