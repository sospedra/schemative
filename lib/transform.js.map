{"version":3,"sources":["../src/transform.js"],"names":["protoMutators","defsKeys","filterByKeys","candidate","keys","intersection","pick","createTransform","definitions","transform","mutators","Object","assign","reduce","memo","value","key","isFunction","defineProperty","get","set"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,IAAIA,gBAAgB,EAApB;AACA,IAAIC,WAAW,EAAf;;AAEO,IAAMC,sCAAe,SAAfA,YAAe,CAACD,QAAD,EAAWE,SAAX,EAAyB;AACnD,MAAMC,OAAO,iBAAEC,YAAF,CAAeJ,QAAf,EAAyB,iBAAEG,IAAF,CAAOD,SAAP,CAAzB,CAAb;AACA,SAAO,iBAAEG,IAAF,CAAOH,SAAP,EAAkBC,IAAlB,CAAP;AACD,CAHM;;AAKA,IAAMG,4CAAkB,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AAC9CC,YAAUL,IAAV,GAAiB,iBAAEA,IAAF,CAAOI,WAAP,CAAjB;AACA,SAAOC,SAAP;AACD,CAHM;;AAKA,IAAMA,gCAAY,SAAZA,SAAY,CAACN,SAAD,EAAyC;AAAA,MAA7BO,QAA6B,uEAAlBV,aAAkB;;AAChE,SAAOW,OAAOC,MAAP,CACLV,aAAaD,QAAb,EAAuBE,SAAvB,CADK,EAEL,iBAAEU,MAAF,CAASH,QAAT,EAAmB,UAACI,IAAD,EAAOC,KAAP,EAAcC,GAAd;AAAA,WAAsBL,OAAOC,MAAP,qBACtCI,GADsC,EAChC,iBAAEC,UAAF,CAAaF,KAAb,IAAsBA,MAAMZ,SAAN,CAAtB,GAAyCY,KADT,GAEtCD,IAFsC,CAAtB;AAAA,GAAnB,EAEU,EAFV,CAFK,CAAP;AAMD,CAPM;;AASPH,OAAOO,cAAP,CAAsBT,SAAtB,EAAiC,UAAjC,EAA6C;AAC3CU,OAAK;AAAA,WAAMnB,aAAN;AAAA,GADsC;AAE3CoB,OAAK,aAACV,QAAD,EAAc;AACjBV,oBAAgBU,QAAhB;AACD;AAJ0C,CAA7C;;AAOAC,OAAOO,cAAP,CAAsBT,SAAtB,EAAiC,MAAjC,EAAyC;AACvCU,OAAK;AAAA,WAAMlB,QAAN;AAAA,GADkC;AAEvCmB,OAAK,aAACZ,WAAD,EAAiB;AACpBP,eAAWO,WAAX;AACD;AAJsC,CAAzC","file":"transform.js","sourcesContent":["import _ from 'lodash'\n\nlet protoMutators = {}\nlet defsKeys = {}\n\nexport const filterByKeys = (defsKeys, candidate) => {\n  const keys = _.intersection(defsKeys, _.keys(candidate))\n  return _.pick(candidate, keys)\n}\n\nexport const createTransform = (definitions) => {\n  transform.keys = _.keys(definitions)\n  return transform\n}\n\nexport const transform = (candidate, mutators = protoMutators) => {\n  return Object.assign(\n    filterByKeys(defsKeys, candidate),\n    _.reduce(mutators, (memo, value, key) => Object.assign({\n      [key]: _.isFunction(value) ? value(candidate) : value\n    }, memo), {})\n  )\n}\n\nObject.defineProperty(transform, 'mutators', {\n  get: () => protoMutators,\n  set: (mutators) => {\n    protoMutators = mutators\n  }\n})\n\nObject.defineProperty(transform, 'keys', {\n  get: () => defsKeys,\n  set: (definitions) => {\n    defsKeys = definitions\n  }\n})\n"]}