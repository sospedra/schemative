{"version":3,"sources":["../src/parsers.js"],"names":["createSchemaByObject","schema","attr","entries","reduce","memo","key","value","iterable","selectRecursiveStrategy","createSchemaByArray","map","values","nestedSchema","isArray","createPropTypes","createDefault","filterByKeys","candidate","keys","intersection","pick","transform","attributes","Object","assign","isFunction"],"mappings":";;;;;;;;;AAAA;;;;;;;;AAEO,IAAMA,sDAAuB,SAAvBA,oBAAuB,CAACC,MAAD,EAASC,IAAT,EAAkB;AACpD,SAAO,iBAAEC,OAAF,CAAUF,MAAV,EACJG,MADI,CACG,UAACC,IAAD,QAAwB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AAC9BF,SAAKC,GAAL,IAAYC,MAAMC,QAAN,GACRC,wBAAwBF,MAAMA,KAA9B,EAAqCL,IAArC,CADQ,GAERK,MAAML,IAAN,CAFJ;AAGA,WAAOG,IAAP;AACD,GANI,EAMF,EANE,CAAP;AAOD,CARM;AASA,IAAMK,oDAAsB,SAAtBA,mBAAsB,CAACT,MAAD,EAASC,IAAT,EAAkB;AACnD,SAAO,iBAAES,GAAF,CAAMV,MAAN,EAAc,UAACW,MAAD,EAAY;AAC/B,WAAOA,OAAOJ,QAAP,GACHC,wBAAwBG,OAAOL,KAA/B,EAAsCL,IAAtC,CADG,GAEHU,OAAOV,IAAP,CAFJ;AAGD,GAJM,CAAP;AAKD,CANM;;AAQA,IAAMO,4DAA0B,SAA1BA,uBAA0B,CAACI,YAAD,EAAeX,IAAf,EAAwB;AAC7D,SAAO,iBAAEY,OAAF,CAAUD,YAAV,IACHH,oBAAoBG,YAApB,EAAkCX,IAAlC,CADG,GAEHF,qBAAqBa,YAArB,EAAmCX,IAAnC,CAFJ;AAGD,CAJM;;AAMA,IAAMa,4CAAkB,SAAlBA,eAAkB,CAACd,MAAD,EAAY;AACzC,SAAOD,qBAAqBC,MAArB,EAA6B,WAA7B,CAAP;AACD,CAFM;;AAIA,IAAMe,wCAAgB,SAAhBA,aAAgB,CAACf,MAAD,EAAY;AACvC,SAAOD,qBAAqBC,MAArB,EAA6B,OAA7B,CAAP;AACD,CAFM;;AAIA,IAAMgB,sCAAe,SAAfA,YAAe,CAAChB,MAAD,EAASiB,SAAT,EAAuB;AACjD,MAAMC,OAAO,iBAAEC,YAAF,CAAe,iBAAED,IAAF,CAAOlB,MAAP,CAAf,EAA+B,iBAAEkB,IAAF,CAAOD,SAAP,CAA/B,CAAb;AACA,SAAO,iBAAEG,IAAF,CAAOH,SAAP,EAAkBC,IAAlB,CAAP;AACD,CAHM;;AAKA,IAAMG,gCAAY,SAAZA,SAAY,CAACrB,MAAD,EAASiB,SAAT,EAAoBK,UAApB;AAAA,SAAmCC,OAAOC,MAAP,CAC1DR,aAAahB,MAAb,EAAqBiB,SAArB,CAD0D,EAE1D,iBAAEd,MAAF,CAASmB,UAAT,EAAqB,UAAClB,IAAD,EAAOE,KAAP,EAAcD,GAAd;AAAA,WAAsBkB,OAAOC,MAAP,CACzCpB,IADyC,sBAGtCC,GAHsC,EAGhC,iBAAEoB,UAAF,CAAanB,KAAb,IAAsBA,MAAMW,SAAN,CAAtB,GAAyCX,KAHT,EAAtB;AAAA,GAArB,EAKG,EALH,CAF0D,CAAnC;AAAA,CAAlB","file":"parsers.js","sourcesContent":["import _ from 'lodash'\n\nexport const createSchemaByObject = (schema, attr) => {\n  return _.entries(schema)\n    .reduce((memo, [key, value]) => {\n      memo[key] = value.iterable\n        ? selectRecursiveStrategy(value.value, attr)\n        : value[attr]\n      return memo\n    }, {})\n}\nexport const createSchemaByArray = (schema, attr) => {\n  return _.map(schema, (values) => {\n    return values.iterable\n      ? selectRecursiveStrategy(values.value, attr)\n      : values[attr]\n  })\n}\n\nexport const selectRecursiveStrategy = (nestedSchema, attr) => {\n  return _.isArray(nestedSchema)\n    ? createSchemaByArray(nestedSchema, attr)\n    : createSchemaByObject(nestedSchema, attr)\n}\n\nexport const createPropTypes = (schema) => {\n  return createSchemaByObject(schema, 'propTypes')\n}\n\nexport const createDefault = (schema) => {\n  return createSchemaByObject(schema, 'value')\n}\n\nexport const filterByKeys = (schema, candidate) => {\n  const keys = _.intersection(_.keys(schema), _.keys(candidate))\n  return _.pick(candidate, keys)\n}\n\nexport const transform = (schema, candidate, attributes) => Object.assign(\n  filterByKeys(schema, candidate),\n  _.reduce(attributes, (memo, value, key) => Object.assign(\n    memo,\n    {\n      [key]: _.isFunction(value) ? value(candidate) : value\n    }\n  ), {})\n)\n"]}